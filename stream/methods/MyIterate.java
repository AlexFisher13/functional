package stream.methods;

import java.util.stream.Stream;

public class MyIterate {
    public static void main(String[] args) {
        /** Генерировать числа начиная со 100, прибавляя по 3, лимит 100 чисел */
        /** Без лимита будет бесконечный поток */
        Stream.iterate(100, n -> n + 3)
                .limit(100)
                .forEach(System.out::println);

        /** Сгенерировать 20 чисел Фибоначи (когда следующее число сумма двух предыдущих)!
         * Сложность в том, что iterate использует один элемент для генерации следующего, нужно для начала 2 числа.
         * Нам же нужно работать именно с парами чисел, для вычисления их сумм.
         * Поэтому, в качестве элемента мы будем использовать в качествое элемента ОДИН массив, из двух значений. */
        Stream.iterate(new int[]{0, 1},
                        t -> new int[]{t[1], t[0] + t[1]})
                .limit(20)
                .forEach(t -> System.out.println("(" + t[0] + "," + t[1] +")"));

        /** В Java 9 в iterate добавили поддержку предикатов,
         * то есть можно генерить, пока не выполнится какое-то условие. */
        /** Начальное значение, условие, шаг*/
        Stream.iterate(0, n -> n < 100, n -> n + 4)
                .forEach(System.out::println);


    }
}
